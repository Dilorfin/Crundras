//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Users\Pavel\Documents\KPI\Translators\Crundras\..\Artifacts\Crundras.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crundras {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CrundrasParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, TypeSpecifier=27, Identifier=28, FloatingLiteral=29, 
		IntegerLiteral=30, Letter=31, Digit=32, WS=33;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_selectionStatement = 2, RULE_iterationStatement = 3, 
		RULE_compoundStatement = 4, RULE_declarationStatement = 5, RULE_assignmentStatement = 6, 
		RULE_assignmentExpression = 7, RULE_expression = 8, RULE_inputStatement = 9, 
		RULE_outputStatement = 10, RULE_literal = 11, RULE_sign = 12, RULE_operator = 13, 
		RULE_arithmeticOperator = 14, RULE_relationalOperator = 15;
	public static readonly string[] ruleNames = {
		"program", "statement", "selectionStatement", "iterationStatement", "compoundStatement", 
		"declarationStatement", "assignmentStatement", "assignmentExpression", 
		"expression", "inputStatement", "outputStatement", "literal", "sign", 
		"operator", "arithmeticOperator", "relationalOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'('", "')'", "'for'", "'to'", "'by'", "'while'", "'rof'", 
		"';'", "'{'", "'}'", "'='", "'$'", "'@'", "'+'", "'-'", "'*'", "'**'", 
		"'/'", "'%'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "TypeSpecifier", "Identifier", "FloatingLiteral", "IntegerLiteral", 
		"Letter", "Digit", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crundras.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CrundrasParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CrundrasParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CrundrasParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << TypeSpecifier) | (1L << Identifier))) != 0)) {
				{
				{
				State = 32; statement();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public InputStatementContext inputStatement() {
			return GetRuleContext<InputStatementContext>(0);
		}
		public OutputStatementContext outputStatement() {
			return GetRuleContext<OutputStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; inputStatement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39; outputStatement();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40; compoundStatement();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41; selectionStatement();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 5);
				{
				State = 42; iterationStatement();
				}
				break;
			case TypeSpecifier:
				EnterOuterAlt(_localctx, 6);
				{
				State = 43; declarationStatement();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 7);
				{
				State = 44; assignmentStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_selectionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(T__0);
			State = 48; Match(T__1);
			State = 49; expression();
			State = 50; Match(T__2);
			State = 51; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_iterationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(T__3);
			State = 54; assignmentExpression();
			State = 55; Match(T__4);
			State = 56; expression();
			State = 57; Match(T__5);
			State = 58; expression();
			State = 59; Match(T__6);
			State = 60; Match(T__1);
			State = 61; expression();
			State = 62; Match(T__2);
			State = 63; statement();
			State = 64; Match(T__7);
			State = 65; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(T__9);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << TypeSpecifier) | (1L << Identifier))) != 0)) {
				{
				{
				State = 68; statement();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		public ITerminalNode TypeSpecifier() { return GetToken(CrundrasParser.TypeSpecifier, 0); }
		public ITerminalNode Identifier() { return GetToken(CrundrasParser.Identifier, 0); }
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_declarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(TypeSpecifier);
			State = 77; Match(Identifier);
			State = 78; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; assignmentExpression();
			State = 81; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CrundrasParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(Identifier);
			State = 84; Match(T__11);
			State = 85; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CrundrasParser.Identifier, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public OperatorContext[] @operator() {
			return GetRuleContexts<OperatorContext>();
		}
		public OperatorContext @operator(int i) {
			return GetRuleContext<OperatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14 || _la==T__15) {
				{
				State = 87; sign();
				}
			}

			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 90; Match(T__1);
				State = 91; expression();
				State = 92; Match(T__2);
				}
				break;
			case FloatingLiteral:
			case IntegerLiteral:
				{
				State = 94; literal();
				}
				break;
			case Identifier:
				{
				State = 95; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 103;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 98; @operator();
					State = 99; expression();
					}
					} 
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CrundrasParser.Identifier, 0); }
		public InputStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterInputStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitInputStatement(this);
		}
	}

	[RuleVersion(0)]
	public InputStatementContext inputStatement() {
		InputStatementContext _localctx = new InputStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_inputStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(T__12);
			State = 107; Match(Identifier);
			State = 108; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OutputStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterOutputStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitOutputStatement(this);
		}
	}

	[RuleVersion(0)]
	public OutputStatementContext outputStatement() {
		OutputStatementContext _localctx = new OutputStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_outputStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(T__13);
			State = 111; expression();
			State = 112; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(CrundrasParser.IntegerLiteral, 0); }
		public ITerminalNode FloatingLiteral() { return GetToken(CrundrasParser.FloatingLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 22, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_la = TokenStream.LA(1);
			if ( !(_la==FloatingLiteral || _la==IntegerLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 24, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_la = TokenStream.LA(1);
			if ( !(_la==T__14 || _la==T__15) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ArithmeticOperatorContext arithmeticOperator() {
			return GetRuleContext<ArithmeticOperatorContext>(0);
		}
		public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_operator);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; arithmeticOperator();
				}
				break;
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; relationalOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperatorContext : ParserRuleContext {
		public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterArithmeticOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitArithmeticOperator(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperatorContext arithmeticOperator() {
		ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_arithmeticOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrundrasListener typedListener = listener as ICrundrasListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\x81', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\a', '\x2', '$', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\'', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x30', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'H', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'K', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x5', '\n', '[', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x63', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'h', '\n', '\n', '\f', '\n', '\xE', '\n', 'k', '\v', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '{', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x2', '\x2', 
		'\x12', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', '\x6', '\x3', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x11', '\x12', '\x3', '\x2', '\x11', 
		'\x16', '\x3', '\x2', '\x17', '\x1C', '\x2', '}', '\x2', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '/', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x37', '\x3', '\x2', '\x2', '\x2', '\n', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'N', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'R', '\x3', '\x2', '\x2', '\x2', '\x10', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'Z', '\x3', '\x2', '\x2', '\x2', '\x14', 'l', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'p', '\x3', '\x2', '\x2', '\x2', '\x18', 't', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', 'v', '\x3', '\x2', '\x2', '\x2', '\x1C', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '|', '\x3', '\x2', '\x2', '\x2', ' ', '~', 
		'\x3', '\x2', '\x2', '\x2', '\"', '$', '\x5', '\x4', '\x3', '\x2', '#', 
		'\"', '\x3', '\x2', '\x2', '\x2', '$', '\'', '\x3', '\x2', '\x2', '\x2', 
		'%', '#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x3', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '(', '\x30', '\x5', '\x14', '\v', '\x2', ')', '\x30', '\x5', '\x16', 
		'\f', '\x2', '*', '\x30', '\x5', '\n', '\x6', '\x2', '+', '\x30', '\x5', 
		'\x6', '\x4', '\x2', ',', '\x30', '\x5', '\b', '\x5', '\x2', '-', '\x30', 
		'\x5', '\f', '\a', '\x2', '.', '\x30', '\x5', '\xE', '\b', '\x2', '/', 
		'(', '\x3', '\x2', '\x2', '\x2', '/', ')', '\x3', '\x2', '\x2', '\x2', 
		'/', '*', '\x3', '\x2', '\x2', '\x2', '/', '+', '\x3', '\x2', '\x2', '\x2', 
		'/', ',', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\a', '\x3', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\x4', '\x2', '\x2', '\x33', '\x34', '\x5', '\x12', '\n', '\x2', '\x34', 
		'\x35', '\a', '\x5', '\x2', '\x2', '\x35', '\x36', '\x5', '\x4', '\x3', 
		'\x2', '\x36', '\a', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\x6', '\x2', '\x2', '\x38', '\x39', '\x5', '\x10', '\t', '\x2', '\x39', 
		':', '\a', '\a', '\x2', '\x2', ':', ';', '\x5', '\x12', '\n', '\x2', ';', 
		'<', '\a', '\b', '\x2', '\x2', '<', '=', '\x5', '\x12', '\n', '\x2', '=', 
		'>', '\a', '\t', '\x2', '\x2', '>', '?', '\a', '\x4', '\x2', '\x2', '?', 
		'@', '\x5', '\x12', '\n', '\x2', '@', '\x41', '\a', '\x5', '\x2', '\x2', 
		'\x41', '\x42', '\x5', '\x4', '\x3', '\x2', '\x42', '\x43', '\a', '\n', 
		'\x2', '\x2', '\x43', '\x44', '\a', '\v', '\x2', '\x2', '\x44', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x45', 'I', '\a', '\f', '\x2', '\x2', '\x46', 
		'H', '\x5', '\x4', '\x3', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\r', '\x2', '\x2', 
		'M', '\v', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x1D', '\x2', 
		'\x2', 'O', 'P', '\a', '\x1E', '\x2', '\x2', 'P', 'Q', '\a', '\v', '\x2', 
		'\x2', 'Q', '\r', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', '\x10', 
		'\t', '\x2', 'S', 'T', '\a', '\v', '\x2', '\x2', 'T', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\a', '\x1E', '\x2', '\x2', 'V', 'W', '\a', '\xE', 
		'\x2', '\x2', 'W', 'X', '\x5', '\x12', '\n', '\x2', 'X', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '[', '\x5', '\x1A', '\xE', '\x2', 'Z', 'Y', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\x4', '\x2', '\x2', 
		']', '^', '\x5', '\x12', '\n', '\x2', '^', '_', '\a', '\x5', '\x2', '\x2', 
		'_', '\x63', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x5', '\x18', '\r', 
		'\x2', '\x61', '\x63', '\a', '\x1E', '\x2', '\x2', '\x62', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x63', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\x5', '\x1C', '\xF', '\x2', '\x65', '\x66', '\x5', 
		'\x12', '\n', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', '\x64', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 
		'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x13', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\a', '\xF', '\x2', '\x2', 'm', 'n', '\a', '\x1E', '\x2', 
		'\x2', 'n', 'o', '\a', '\v', '\x2', '\x2', 'o', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\a', '\x10', '\x2', '\x2', 'q', 'r', '\x5', '\x12', 
		'\n', '\x2', 'r', 's', '\a', '\v', '\x2', '\x2', 's', '\x17', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\t', '\x2', '\x2', '\x2', 'u', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\t', '\x3', '\x2', '\x2', 'w', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', 'x', '{', '\x5', '\x1E', '\x10', '\x2', 'y', 
		'{', '\x5', ' ', '\x11', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 
		'z', 'y', '\x3', '\x2', '\x2', '\x2', '{', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\t', '\x4', '\x2', '\x2', '}', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\t', '\x5', '\x2', '\x2', '\x7F', '!', '\x3', 
		'\x2', '\x2', '\x2', '\t', '%', '/', 'I', 'Z', '\x62', 'i', 'z',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crundras
